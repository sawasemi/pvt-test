<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>精神運動ウィジランステスト</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Hiragino Sans', 'Yu Gothic UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 30px;
            max-width: 400px;
            width: 100%;
            text-align: center;
        }

        .title {
            color: #333;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .subtitle {
            color: #666;
            font-size: 14px;
            margin-bottom: 30px;
            line-height: 1.5;
        }

        .setup-section {
            margin-bottom: 30px;
        }

        .duration-selector {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .duration-btn {
            background: #f0f0f0;
            border: 2px solid #ddd;
            border-radius: 10px;
            padding: 10px 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .duration-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .start-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 15px;
            padding: 15px 30px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s ease;
            width: 100%;
        }

        .start-btn:hover {
            transform: translateY(-2px);
        }

        .test-area {
            display: none;
            min-height: 300px;
            position: relative;
        }

        .test-display {
            width: 100%;
            height: 200px;
            border: 3px solid #667eea;
            border-radius: 15px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 48px;
            font-weight: bold;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f8f9ff;
        }

        .test-display.active {
            background: #667eea;
            color: white;
            box-shadow: 0 0 20px rgba(102, 126, 234, 0.5);
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            width: 0%;
            transition: width 0.3s ease;
        }

        .test-info {
            display: flex;
            justify-content: space-between;
            font-size: 14px;
            color: #666;
            margin-bottom: 15px;
        }

        .stop-btn {
            background: #ff6b6b;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 10px 20px;
            cursor: pointer;
            font-size: 14px;
        }

        .results-section {
            display: none;
        }

        .score-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .score-main {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .score-label {
            font-size: 14px;
            opacity: 0.9;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-item {
            background: #f8f9ff;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: transform 0.2s ease;
        }

        .btn:hover {
            transform: translateY(-1px);
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-secondary {
            background: #f0f0f0;
            color: #333;
        }

        .instructions {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            text-align: left;
            font-size: 14px;
            line-height: 1.6;
        }

        .instructions h3 {
            color: #856404;
            margin-bottom: 10px;
        }

        .instructions ul {
            margin-left: 20px;
            color: #856404;
        }

        .instructions li {
            margin-bottom: 5px;
        }

        @media (max-width: 480px) {
            .container {
                padding: 20px;
            }
            
            .duration-selector {
                flex-direction: column;
            }
            
            .duration-btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="title">精神運動ウィジランステスト</div>
        <div class="subtitle">注意力と反応時間を測定します</div>

        <!-- セットアップ画面 -->
        <div class="setup-section" id="setupSection">
            <div class="instructions">
                <h3>テストの説明</h3>
                <ul>
                    <li>画面に数字が表示されたらすぐにタップしてください</li>
                    <li>できるだけ早く、正確に反応してください</li>
                    <li>数字が表示されていない時はタップしないでください</li>
                    <li>集中して取り組んでください</li>
                </ul>
            </div>

            <div style="margin-bottom: 20px;">
                <div style="font-weight: bold; margin-bottom: 10px;">テスト時間を選択：</div>
                <div class="duration-selector">
                    <div class="duration-btn" data-duration="60">1分</div>
                    <div class="duration-btn" data-duration="180">3分</div>
                    <div class="duration-btn active" data-duration="300">5分</div>
                    <div class="duration-btn" data-duration="600">10分</div>
                </div>
            </div>

            <button class="start-btn" onclick="startTest()">テスト開始</button>
        </div>

        <!-- テスト画面 -->
        <div class="test-area" id="testArea">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            
            <div class="test-info">
                <span>残り時間: <span id="timeLeft">5:00</span></span>
                <span>反応回数: <span id="reactionCount">0</span></span>
            </div>

            <div class="test-display" id="testDisplay" onclick="handleResponse()">
                準備してください...
            </div>

            <button class="stop-btn" onclick="stopTest()">テスト終了</button>
        </div>

        <!-- 結果画面 -->
        <div class="results-section" id="resultsSection">
            <div class="score-card">
                <div class="score-main" id="avgReactionTime">0ms</div>
                <div class="score-label">平均反応時間</div>
            </div>

            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="totalReactions">0</div>
                    <div class="stat-label">総反応回数</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="fastestTime">0ms</div>
                    <div class="stat-label">最速反応時間</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="slowestTime">0ms</div>
                    <div class="stat-label">最遅反応時間</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="falseStarts">0</div>
                    <div class="stat-label">フライング回数</div>
                </div>
            </div>

            <div class="action-buttons">
                <button class="btn btn-primary" onclick="shareResults()">結果を共有</button>
                <button class="btn btn-secondary" onclick="resetTest()">再テスト</button>
            </div>
        </div>
    </div>

    <script>
        let testState = {
            duration: 300, // デフォルト5分
            startTime: null,
            endTime: null,
            currentStimulus: null,
            stimulusStartTime: null,
            reactionTimes: [],
            falseStarts: 0,
            testRunning: false,
            timer: null,
            stimulusTimer: null
        };

        // 時間選択
        document.querySelectorAll('.duration-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.duration-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                testState.duration = parseInt(this.dataset.duration);
            });
        });

        function startTest() {
            // 画面切り替え
            document.getElementById('setupSection').style.display = 'none';
            document.getElementById('testArea').style.display = 'block';
            
            // テスト状態初期化
            testState.startTime = Date.now();
            testState.endTime = testState.startTime + (testState.duration * 1000);
            testState.reactionTimes = [];
            testState.falseStarts = 0;
            testState.testRunning = true;
            
            updateDisplay();
            startTimer();
            scheduleNextStimulus();
        }

        function startTimer() {
            testState.timer = setInterval(() => {
                const now = Date.now();
                const remaining = Math.max(0, testState.endTime - now);
                
                if (remaining <= 0) {
                    stopTest();
                    return;
                }
                
                updateTimeDisplay(remaining);
                updateProgress(remaining);
            }, 100);
        }

        function updateTimeDisplay(remaining) {
            const minutes = Math.floor(remaining / 60000);
            const seconds = Math.floor((remaining % 60000) / 1000);
            document.getElementById('timeLeft').textContent = 
                `${minutes}:${seconds.toString().padStart(2, '0')}`;
        }

        function updateProgress(remaining) {
            const progress = ((testState.duration * 1000 - remaining) / (testState.duration * 1000)) * 100;
            document.getElementById('progressFill').style.width = `${progress}%`;
        }

        function scheduleNextStimulus() {
            if (!testState.testRunning) return;
            
            // 2-10秒の間隔でランダムに刺激を提示
            const delay = 2000 + Math.random() * 8000;
            
            testState.stimulusTimer = setTimeout(() => {
                if (testState.testRunning) {
                    showStimulus();
                }
            }, delay);
        }

        function showStimulus() {
            const display = document.getElementById('testDisplay');
            const reactionTime = Math.floor(Math.random() * 900) + 100; // 100-999ms表示用
            
            display.textContent = reactionTime;
            display.classList.add('active');
            
            testState.currentStimulus = Date.now();
            testState.stimulusStartTime = testState.currentStimulus;
            
            // 3秒後に自動的に刺激を消す
            setTimeout(() => {
                if (testState.currentStimulus === testState.stimulusStartTime) {
                    hideStimulus();
                }
            }, 3000);
        }

        function hideStimulus() {
            const display = document.getElementById('testDisplay');
            display.textContent = '待機中...';
            display.classList.remove('active');
            testState.currentStimulus = null;
            
            scheduleNextStimulus();
        }

        function handleResponse() {
            const now = Date.now();
            
            if (testState.currentStimulus) {
                // 正しい反応
                const reactionTime = now - testState.currentStimulus;
                testState.reactionTimes.push(reactionTime);
                hideStimulus();
                updateDisplay();
            } else {
                // フライング
                testState.falseStarts++;
                updateDisplay();
            }
        }

        function updateDisplay() {
            document.getElementById('reactionCount').textContent = testState.reactionTimes.length;
        }

        function stopTest() {
            testState.testRunning = false;
            
            if (testState.timer) {
                clearInterval(testState.timer);
            }
            if (testState.stimulusTimer) {
                clearTimeout(testState.stimulusTimer);
            }
            
            showResults();
        }

        function showResults() {
            document.getElementById('testArea').style.display = 'none';
            document.getElementById('resultsSection').style.display = 'block';
            
            if (testState.reactionTimes.length === 0) {
                document.getElementById('avgReactionTime').textContent = '0ms';
                document.getElementById('totalReactions').textContent = '0';
                document.getElementById('fastestTime').textContent = '0ms';
                document.getElementById('slowestTime').textContent = '0ms';
                document.getElementById('falseStarts').textContent = testState.falseStarts;
                return;
            }
            
            const avgTime = Math.round(
                testState.reactionTimes.reduce((a, b) => a + b, 0) / testState.reactionTimes.length
            );
            const fastestTime = Math.min(...testState.reactionTimes);
            const slowestTime = Math.max(...testState.reactionTimes);
            
            document.getElementById('avgReactionTime').textContent = `${avgTime}ms`;
            document.getElementById('totalReactions').textContent = testState.reactionTimes.length;
            document.getElementById('fastestTime').textContent = `${fastestTime}ms`;
            document.getElementById('slowestTime').textContent = `${slowestTime}ms`;
            document.getElementById('falseStarts').textContent = testState.falseStarts;
        }

        function shareResults() {
            const avgTime = testState.reactionTimes.length > 0 ? 
                Math.round(testState.reactionTimes.reduce((a, b) => a + b, 0) / testState.reactionTimes.length) : 0;
            
            const shareText = `🧠 精神運動ウィジランステスト結果 🧠\n\n` +
                `⏱️ 平均反応時間: ${avgTime}ms\n` +
                `🎯 総反応回数: ${testState.reactionTimes.length}\n` +
                `⚡ 最速反応時間: ${testState.reactionTimes.length > 0 ? Math.min(...testState.reactionTimes) : 0}ms\n` +
                `❌ フライング回数: ${testState.falseStarts}\n` +
                `🕐 テスト時間: ${testState.duration / 60}分\n\n` +
                `#精神運動ウィジランステスト #反応時間 #注意力テスト`;

            if (navigator.share) {
                navigator.share({
                    title: '精神運動ウィジランステスト結果',
                    text: shareText
                });
            } else {
                // フォールバック：クリップボードにコピー
                navigator.clipboard.writeText(shareText).then(() => {
                    alert('結果をクリップボードにコピーしました！');
                }).catch(() => {
                    // テキストエリアを使ったフォールバック
                    const textArea = document.createElement('textarea');
                    textArea.value = shareText;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    alert('結果をクリップボードにコピーしました！');
                });
            }
        }

        function resetTest() {
            document.getElementById('resultsSection').style.display = 'none';
            document.getElementById('setupSection').style.display = 'block';
            
            // 状態リセット
            testState = {
                duration: testState.duration, // 選択した時間は保持
                startTime: null,
                endTime: null,
                currentStimulus: null,
                stimulusStartTime: null,
                reactionTimes: [],
                falseStarts: 0,
                testRunning: false,
                timer: null,
                stimulusTimer: null
            };
        }

        // LINE LIFF初期化
        if (typeof liff !== 'undefined') {
            liff.init({
                liffId: '2007512404-7YL3rj4y' // ← ここに取得したLIFF IDを入力してください
            }).then(() => {
                console.log('LIFF初期化成功');
                // LINEユーザー情報取得（任意）
                if (liff.isLoggedIn()) {
                    liff.getProfile().then(profile => {
                        console.log('ユーザー名:', profile.displayName);
                    });
                }
            }).catch((err) => {
                console.error('LIFF初期化エラー:', err);
            });
        }
    </script>
</body>
</html>